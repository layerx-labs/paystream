import { writeFileSync } from 'fs';
import * as path from 'path';
import { Prisma } from '@prisma/client';
import { camelize } from '../../utils/string';

type IConfig = {
  outputPath: string;
  namespacePath: string;
  unwantedModels: ReadonlyArray<string>;
  inputSuffixes: ReadonlyArray<string>;
};

const config: IConfig = {
  namespacePath: 'node_modules/.prisma/client/index.d.ts',
  outputPath: path.resolve(
    'server/services/database/entity-inputs/generated-inputs.ts'
  ),
  unwantedModels: [],
  inputSuffixes: ['CreateInput', 'WhereInput', 'UpdateInput', 'Select'],
};

const models = Object.values(Prisma.ModelName).filter(
  model =>
    !config.unwantedModels
      .map(um => um.toLowerCase())
      .includes(model.toLowerCase())
);

function genTypes({
  models,
  suffix = '',
  prefix = '',
}: {
  models: string[];
  suffix?: string;
  prefix?: string;
}) {
  return Object.values(models).reduce(
    (acc, model) => ({
      ...acc,
      [camelize(model)]: `${prefix}${model}${suffix}`,
    }),
    {}
  );
}

function generateInputs(config: IConfig) {
  return config.inputSuffixes
    .map(suffix =>
      `export type Generated${suffix}s = ${JSON.stringify(
        genTypes({ models, suffix, prefix: 'Prisma.' })
      )}`.replace(/\"/g, '')
    )
    .join('\n');
}

function generateEntities() {
  return `export type GeneratedEntities = ${JSON.stringify(
    genTypes({ models })
  )}\n`.replace(/\"/g, '');
}

/**
 * Generate Inputs for Prisma Models
 * @param config
 */
function start(config: IConfig) {
  const header = `
/** 
* ================================================================== 
* This file is generated by script 'gen-inputs'                     |
* Do not edit this file directly, any changes will be overwritten   |
* ==================================================================
* @generated on ${new Date().toISOString()} 
* 
*/
  
import { Prisma, ${models.join(', ')} } from '@prisma/client';\n\n`;

  const entities = generateEntities();
  const inputs = generateInputs(config);

  writeFileSync(
    path.resolve(config.outputPath),
    `${header}${entities}${inputs}`,
    {
      encoding: 'utf-8',
    }
  );
  console.info(
    'Generated Prisma Inputs successfully',
    `see: ${config.outputPath}`
  );
}

start(config);
