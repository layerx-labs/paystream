import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { GridContainer, GridCol, GridRow, Button } from "@taikai/rocket-kit";
import { useBalance } from "../hooks/useBalance";
import { useERC20Balance } from "../hooks/useERC20Balance";
import { useWeb3 } from "../hooks/useWeb3";
import { dappConfig } from "../config";
import useSablier from "../hooks/useSablier";
import useWeb3Mutation, { CreateStreamMethod, MapToReceipt } from "../hooks/useWeb3Mutation";
import { Sablier } from "paystream-sdk";
import { TransactionReceipt } from "@taikai/dappkit/dist/src/interfaces/web3-core";

const ShowWalletDetails = ()=> {
  
  const { address, chainId }  = useWeb3();
  const { balance } = useBalance();
  const { balance: beproBalance } = useERC20Balance(
    dappConfig.beproContracAddress, 
    address
  );

  const {contract} = useSablier(dappConfig.beproContracAddress)
  const {loading, error, mutate} = useWeb3Mutation<
    Sablier, 
    MapToReceipt<CreateStreamMethod>, 
    "createStream"
  >(
    contract, 
    "createStream", 
    {
      contractAddress: dappConfig.beproContracAddress,
      onMutate: (receipt: TransactionReceipt) => { 
        console.log(receipt)
      },
      onError: ( error: Error)=> {
        console.log(error)
      },    
    });
  

  return <>
      <GridRow>
        <GridCol>{chainId}</GridCol>
      </GridRow>
      <GridRow>
        <GridCol>{address}</GridCol>
      </GridRow>
      <GridRow>
        <GridCol>{balance} ETH</GridCol>
      </GridRow>
      <GridRow>
        <GridCol>{beproBalance} BEPRO</GridCol>
      </GridRow>
    </>
};

const Home: NextPage = () => { 
  const {connected, connect, disconnect, error } = useWeb3();

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <GridContainer className={styles.main}>
        <GridRow>
          <GridCol>PayStream App</GridCol>
        </GridRow>
        <GridRow>
          <GridCol>
            {!connected && (
              <Button
                ariaLabel="Connect Wallet"
                className="button"
                color="green"
                querySelector=".button"
                value="Connect Wallet"
                variant="solid"
                action={()=> connect()}
              />
            )}
          </GridCol>
        </GridRow>
        {connected && <ShowWalletDetails />}         
        {connected && (
          <GridRow>
            <GridCol>
              <Button
                ariaLabel="Disconnect Wallet"
                className="button"
                color="green"
                querySelector=".button"
                value="Disconnect Wallet"
                variant="solid"
                action={() => {
                  disconnect();
                }}
              />
            </GridCol>
          </GridRow>
        )}
        {error && (
          <GridRow>
            <GridCol>
              <>Error: {error}</>
            </GridCol>
          </GridRow>
        )}       
      </GridContainer>
    </div>
  );
};

export default Home;
